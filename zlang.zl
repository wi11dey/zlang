(define `(imports . ,modules) modules)
(define `(module . ,name) name)
(define `(file (module . ,name) (imports . ,modules) . ,body))

(define '(,f ,a (number ,b))
  (number a))

(define '(not #f) #t)
(define '(not #t) #f)

(define '(and #f #f) #f)
(define '(and #f #t) #f)
(define '(and #t #f) #f)
(define '(and #t #t) #t)

(define '(or #f #f) #f)
(define '(or #f #t) #t)
(define '(or #t #f) #t)
(define '(or #t #t) #t)

(define `(if #f _     ,else) else)
(define `(if #t ,then _)     then)

(define '(add (binary ,a) (binary ,b))
  (if (equals a 1)))

(define '(add (number ,a) (number ,b))
  (add (binary a) (binary b)))

(define '(add (list ,addends))
  )

(define '+ add)

(define (noun (add . _)) "addition")

(define (verb f) (name f))

(define (gerund f) (append (verb f) "ing"))

(define (append (list . a) (list . b))
  (cond
   ((equals a '())
    ))
  (if (equals a '())
      ))

(define `(read (string ,s))
  (match (car (list s))
	 #\# => ))
