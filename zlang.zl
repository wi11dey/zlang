(define `(imports . ,modules) modules)
(define `(module . ,name) name)
(define `(file (module . ,name) (imports . ,modules) . ,body))

(define '(,f ,a (number ,b))
  (number a))

(define '(not #f) #t)
(define '(not #t) #f)

(define '(and #f #f) #f)
(define '(and #f #t) #f)
(define '(and #t #f) #f)
(define '(and #t #t) #t)

(define '(or #f #f) #f)
(define '(or #f #t) #t)
(define '(or #t #f) #t)
(define '(or #t #t) #t)

(define `(if #f _     ,else) else)
(define `(if #t ,then _)     then)

(define '(add (binary ,a) (binary ,b))
  (if (equals a 1)))

(define '(add (number ,a) (number ,b))
  (add (binary a) (binary b)))

(define '(add (list ,addends))
  )

(define '+ add)

(define (noun (add . _)) "addition")

(define (verb f) (name f))

(define (gerund f) (append (verb f) "ing"))

(define (append (list . a) (list . b))
  (cond
   ((equals a '())
    ))
  (if (equals a '())
      ))

(define `(read (string ,s))
  (match (car (list s))
    #\# => ))



(define (successor 0) 1)
(define (successor 1) 2)
(define (inverse successor 1) 0)
;; ...

;; e.g.:
(define (head-safe ()) ())
(define (tail-safe ()) ())
(define (head-safe 'x) (head x))
(define (tail-safe 'x) (tail x))

(function ('x) (* x x))

(define (list 'x)
  (define (head list) x)
  (define (tail list) ())
  (define outer list)
  (define (list 'y)
    (define (head list) y)
    (define (tail list) outer)
    list)
  list)

(define list
  (function ('x)
    (define head
      (function (list) x))
    (define tail
      (function (list) ()))
    (define outer list)
    (define list
      (function ('y)
	(define head
	  (function (list) y))
	(define tail
	  (function (list) outer))
	list))
    list))

(list 1 2 3)

(((list 1) 2) 3)
