(define (dolist)
  )

(define (Struct))

(define (Enum))

(define (push (list (List)))
  (if ((length list) list)))

(define (read (string (String)))
  (let ((exp ((List Bit))))
    
    (Expression exp)))

;; With possible reader macro meaning ::a --> (a)
(define (read (string::String))
  ~verb "asflksj"
  ~math "read"
  (let::(exp::(List Bit))
    (Expression exp))
  (let ((exp::(List Bit))
	(string::String))
    (Expression exp)))

::::::::::1

;; With possible reader macro meaning (a::b) --> (a . (b))
(define (read (string::String))
  ~verb "asflksj"
  ~math "read"
  (let ((exp::(List Bit)))
    (@ exp capacity)
    (Expression exp)))

(define (zLisp)
  )

(zLisp)
