(define `(imports . ,modules) modules)
(define `(module . ,name) name)
(define `(file (module . ,name) (imports . ,modules) . ,body))

(define '(,f ,a (number ,b))
  (number a))

(define '(not #f) #t)
(define '(not #t) #f)

(define '(and #f #f) #f)
(define '(and #f #t) #f)
(define '(and #t #f) #f)
(define '(and #t #t) #t)

(define '(or #f #f) #f)
(define '(or #f #t) #t)
(define '(or #t #f) #t)
(define '(or #t #t) #t)

(define `(if #f _     ,else) else)
(define `(if #t ,then _)     then)

(define '(add (binary ,a) (binary ,b))
  (if (equals a 1)))

(define '(add (number ,a) (number ,b))
  (add (binary a) (binary b)))

(define '(add (list ,addends))
  )

(define '+ add)

(define (noun (add . _)) "addition")

(define (verb f) (name f))

(define (gerund f) (append (verb f) "ing"))

(define (append (list . a) (list . b))
  (cond
   ((equals a '())
    ))
  (if (equals a '())
      ))

(define `(read (string ,s))
  (match (car (list s))
    #\# => ))



(define (successor 0) 1)
(define (successor 1) 2)
(define (inverse successor 1) 0)
;; ...

;; e.g.:
(define (head-safe ()) ())
(define (tail-safe ()) ())
(define (head-safe 'x) (head x))
(define (tail-safe 'x) (tail x))

(function 'x (* x x))

(define (add (integer 'a) (integer 'b))
  (+ a b))

(define (add (integer 'a))
  (define (add (integer 'b))
    (+ a b))
  add)

(define add
  (function (integer 'a)
    (define add
      (function (integer 'b)
	(+ a b)))
    add))

(define (add (integer 'a) (float 'b))
  (+. a b))

(define add
  (function (integer 'a)
    (define add
      (function (integer 'b)
	(+ a b)))
    (define add
      (function (float 'b)
	(+. a b)))
    add))

(define (add (integer 'a))
  1)

(define add
  (function (integer 'a)
    (define add
      (function (integer 'b)
	(+ a b)))
    (define add
      (function (float 'b)
	(+ a b)))
    (define ('f add)
      (f 1))
    add))

(+ (add 5) 2) => 2

(+ add 1)

(define (a (integer 'x))
  )

(define b a)

(define (b (real 'x))
  1)

(a (real 5))

(define (integer (real 'a))
  (- a (mod a 1)))

(define int integer)

(define (a _)
  (define int 4)
  (define (int something)
    1)
  (define (integer another)
    1)
  (integer something))



(define (add (integer 'a))
  (define (add (integer 'b))
    (+ a b))
  add)

(add 1 2)

((add 1) 2)

([{(add . (function (integer 'a)
	    (define (add (integer 'b))
	      (+ a b))
	    add))}
  {(a . 1)
   (add . (function (integer 'b)
	    (+ a b)))}
  add]
 2)

(define (tail (stack _)) ())
(define (stack 'x)
  (define (head stack) x)
  (define (tail (stack _)) stack)
  stack)

(define stack
  (function 'x
    (define (head stack) x)
    (define (tail (stack _)) stack)
    stack))

(stack 1 2)

((stack 1) 2)

([{(tail . (function (stack _) ()))
   (stack . (function 'x
	      (define (head stack) x)
	      (define (tail (stack _)) stack)
	      stack))}
  {(x . 1)
   (head . (function stack x))
   (tail . (function (stack _) stack))}
  stack] 2)


;; Scheme example:

(define (idfun proc)
  proc)

(define test (idfun (lambda () (test))))

;; zlang version:
(define (idfun 'proc)
  proc)

(define 'test
  (idfun (function 'x
	   (test x))))

(define (test2)
  test3)

(define (test3)
  test2)

(define (stack1 'x)
  (define (head stack2) x)
  (define (tail (stack2 _)) stack2)
  stack2)

(define (stack2 'x)
  (stack1 x))

(stack1 1 2)

((stack1 1) 2)
